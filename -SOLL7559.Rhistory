source('~/R/packages/forestmangr/R/ident_model_full.R', encoding = 'UTF-8')
ident_model_full_(teste_id, "trat", alt ~ tem + tem2)
source('~/R/packages/forestmangr/R/ident_model_full.R', encoding = 'UTF-8')
ident_model_full_(teste_id, "trat", alt ~ tem + tem2)
library(forestmangr)
ident_model_full_(teste_id, "trat", alt ~ tem + tem2)
source('~/R/packages/forestmangr/R/ident_model_full.R', encoding = 'UTF-8')
ident_model_full_(teste_id, "trat", alt ~ tem + tem2)
ident_model(teste_id, "trat", alt ~ tem + tem2)
ident_model_full_(teste_id, "trat", alt ~ tem + tem2)
ident_model(teste_id, "trat", alt ~ tem + tem2,output = "plot")
source('~/R/packages/forestmangr/R/ident_model_full.R', encoding = 'UTF-8')
ident_model_full_(teste_id, "trat", alt ~ tem + tem2)
ident_model(teste_id, "trat", alt ~ tem + tem2,output = "plot")
ident_model_full_(teste_id, "trat", alt ~ tem + tem2)
ident_model(teste_id, "trat", alt ~ tem + tem2)
source('~/R/packages/forestmangr/R/ident_model_full.R', encoding = 'UTF-8')
ident_model_full_(teste_id, "trat", alt ~ tem + tem2)
source('~/R/packages/forestmangr/R/ident_model_full.R', encoding = 'UTF-8')
ss <- ident_model_full_(teste_id, "trat", alt ~ tem + tem2)
ss
View(ss)
source('~/R/packages/forestmangr/R/ident_model_full.R', encoding = 'UTF-8')
ident_model_full_(teste_id, "trat", alt ~ tem + tem2)
ident_model(teste_id, "trat", alt ~ tem + tem2)
levels(forcats::as.character(teste_id$trat))
levels(forcats::as_factor(as.character(teste_id$trat)))
ident_model(teste_id, "trat", alt ~ tem + tem2,filter = c("1","2"))
ident_model(teste_id, "trat", alt ~ tem + tem2,filter = c("1","3"))
ident_model(teste_id, "trat", alt ~ tem + tem2,filter = c("1","4"))
ident_model(teste_id, "trat", alt ~ tem + tem2,filter = c("1","5"))
ident_model(teste_id, "trat", alt ~ tem + tem2,filter = c(1,2))
ident_model(teste_id, "trat", alt ~ tem + tem2,filter = c("1","5"))
ident_model(teste_id, "trat", alt ~ tem + tem2,filter = c("1","6"))
ident_model(teste_id, "trat", alt ~ tem + tem2,filter = c("5","6"))
ident_model(teste_id, "trat", alt ~ tem + tem2,filter = c("5","4"))
teste_id -> df
DF <- as.data.frame(df)
#drop factor levels
DF <- droplevels(DF)
signif = 0.05
font="serif"
gray_scale = TRUE
reduced_model <-  alt ~ tem + tem2
# Definicao do modelo reduzido
MODELO_REDUZIDO <- reduced_model
# Definicao da significancia do teste
SIGNIF <- signif
# Conversao da variavel utilizada como fator, para fator
FACTOR <-forcats::as_factor( as.character(DF[[factor]]) )
factor <- "trat"
# Conversao da variavel utilizada como fator, para fator
FACTOR <-forcats::as_factor( as.character(DF[[factor]]) )
FACTOR
DF[[factor]] <- FACTOR
DF
# Definicao dos niveis do fator utilizado
FACTOR_LEVELS <- levels(FACTOR)
FACTOR_LEVELS
# Definicao do numero de niveis
N_FACTOR_LEVELS <- length(FACTOR_LEVELS)
N_FACTOR_LEVELS
# Rodar o teste
test <- forestmangr::ident_model(DF, factor, MODELO_REDUZIDO,output = "table",gray_scale = gray_scale,signif = SIGNIF, font = font)
test
# captirar o resultado
resultado <- as.character(test[[3,"Result"]])
resultado
# Testar todas as combinacoes possiveis dos fatores
ALL_COMB <- utils::combn(FACTOR_LEVELS,2)
ALL_COMB
COMB_DF <- as.data.frame(ALL_COMB)
COMB_DF
names(COMB_DF) <- paste("test",1:length(COMB_DF),sep="_")
COMB_DF <- suppressWarnings(COMB_DF %>% tidyr::gather(test,levels))
COMB_DF
str(COMB_DF)
# criar listas vazias para o for
lista_testes <- list()
lista_results <- list()
# fazer um teste para cada combinacao
for(i in 1:ncol(ALL_COMB)){
# Rodar o teste para a combinacao i, filtrando os dados de acordo com a combinacao i
lista_testes[[paste(ALL_COMB[,i],collapse =  " & ")]] <- ident_model(DF, factor, MODELO_REDUZIDO,filter = ALL_COMB[,i],output="table")
# salvar o resultado do teste i em uma lista separada, para ser usado mais tarde
lista_results[[i]] <- matrix(as.character(lista_testes[[i]] [[3,"Result"]]),nrow=2,ncol=1)
}
#unir com teste original
lista_testes <- c(original_test=list(test),lista_testes)
lista_testes
# Salvar o vetor com os resultados do teste no dataframe
COMB_DF$resultado <- as.vector(do.call(rbind,lista_results))
COMB_DF %>%
dplyr::arrange(resultado)
COMB_DF %>%
dplyr::arrange(resultado) %>%
# manter resultados com ns
# manter apenas resultados com * que nao aparecem em ns, ou seja, apenas os * unicos
dplyr::filter(resultado=="ns" | (resultado=="*" & ! levels %in% levels[resultado=="ns"] )) %>%
dplyr::distinct(levels,.keep_all = TRUE)
COMB_DF %>%
dplyr::arrange(resultado) %>%
# manter resultados com ns
# manter apenas resultados com * que nao aparecem em ns, ou seja, apenas os * unicos
dplyr::filter(resultado=="ns" | (resultado=="*" & ! levels %in% levels[resultado=="ns"] )) %>%
dplyr::distinct(levels,.keep_all = TRUE)
COMB_DF_F <- COMB_DF %>%
# concatenar os resultados ns em uma unica string
# chamar levels de equacao.
# Isso e importante pois essa coluna sera utilizada
# para difenciar as diferentes equacoes
dplyr::mutate(equacao=dplyr::case_when(
resultado=="*" ~ levels,
resultado=="ns" ~ paste(levels[resultado=="ns"],collapse = " & ")  ),
test=NULL, # remover outras colunas
levels=NULL) %>%
# remover duplicatas
dplyr::distinct()
COMB_DF <- as.data.frame(ALL_COMB)
names(COMB_DF) <- paste("test",1:length(COMB_DF),sep="_")
COMB_DF <- suppressWarnings(COMB_DF %>% tidyr::gather(test,levels))
COMB_DF
# Salvar o vetor com os resultados do teste no dataframe
COMB_DF$resultado <- as.vector(do.call(rbind,lista_results))
COMB_DF
# criar listas vazias para o for
lista_testes <- list()
lista_results <- list()
COMB_DF <- as.data.frame(ALL_COMB)
names(COMB_DF) <- paste("test",1:length(COMB_DF),sep="_")
COMB_DF <- suppressWarnings(COMB_DF %>% tidyr::gather(test,levels))
# criar listas vazias para o for
lista_testes <- list()
lista_results <- list()
# fazer um teste para cada combinacao
for(i in 1:ncol(ALL_COMB)){
# Rodar o teste para a combinacao i, filtrando os dados de acordo com a combinacao i
lista_testes[[paste(ALL_COMB[,i],collapse =  " & ")]] <- ident_model(DF, factor, MODELO_REDUZIDO,filter = ALL_COMB[,i],output="table")
# salvar o resultado do teste i em uma lista separada, para ser usado mais tarde
lista_results[[i]] <- matrix(as.character(lista_testes[[i]] [[3,"Result"]]),nrow=2,ncol=1)
}
#unir com teste original
lista_testes <- c(original_test=list(test),lista_testes)
# Salvar o vetor com os resultados do teste no dataframe
COMB_DF$resultado <- as.vector(do.call(rbind,lista_results))
COMB_DF
COMB_DF %>%
dplyr::arrange(resultado) %>%
# manter resultados com ns
# manter apenas resultados com * que nao aparecem em ns, ou seja, apenas os * unicos
dplyr::filter(resultado=="ns" | (resultado=="*" & ! levels %in% levels[resultado=="ns"] )) %>%
dplyr::distinct(levels,.keep_all = TRUE)
COMB_DF %>%
dplyr::arrange(resultado)
COMB_DF %>%
dplyr::group_by(test) %>%
dplyr::arrange(resultado) %>%
# manter resultados com ns
# manter apenas resultados com * que nao aparecem em ns, ou seja, apenas os * unicos
dplyr::filter(resultado=="ns" | (resultado=="*" & ! levels %in% levels[resultado=="ns"] ))
COMB_DF %>%
dplyr::group_by(test) %>%
dplyr::arrange(resultado) %>%
# manter resultados com ns
# manter apenas resultados com * que nao aparecem em ns, ou seja, apenas os * unicos
dplyr::filter(resultado=="ns" | (resultado=="*" & ! levels %in% levels[resultado=="ns"] )) %>% View
View(COMB_DF)
library(tidyverse)
COMB_DF %>%
spread(levels)
OMB_DF
COMB_DF
COMB_DF %>%
spread(test,levels)
COMB_DF %>%
rowid_to_column() %>%
spread(test,levels)
COMB_DF
as_tibble(COMB_DF)
COMB_DF <- as.data.frame(ALL_COMB)
names(COMB_DF) <- paste("test",1:length(COMB_DF),sep="_")
COMB_DF
suppressWarnings(COMB_DF %>% tidyr::gather(test,levels))
COMB_DF
COMB_DF %>%
mutate(id=c("test1","test2"))
suppressWarnings(COMB_DF %>% tidyr::gather(test,levels))
COMB_DF <- suppressWarnings(COMB_DF %>% tidyr::gather(test,levels))
# Salvar o vetor com os resultados do teste no dataframe
COMB_DF$resultado <- as.vector(do.call(rbind,lista_results))
COMB_DF
COMB_DF %>%
mutate(id=c("test1","test2"))
COMB_DF %>%
group_by(test) %>%
mutate(id=c("test1","test2"))
#rowid_to_column() %>%
spread(id,levels)
COMB_DF %>%
group_by(test) %>%
mutate(id=c("test1","test2")) %>%
#rowid_to_column() %>%
spread(id,levels)
COMB_DF %>%
group_by(test) %>%
mutate(id=c("level1","level2")) %>%
#rowid_to_column() %>%
spread(id,levels)
COMB_DF %>%
group_by(test) %>%
mutate(id=c("level1","level2")) %>%
#rowid_to_column() %>%
spread(id,levels) %>%
arrange(level1)
COMB_DF %>%
group_by(test) %>%
mutate(id=c("level1","level2")) %>%
#rowid_to_column() %>%
spread(id,levels) %>%
arrange(level1,level2)
COMB_DF %>%
group_by(test) %>%
mutate(id=c("level1","level2")) %>%
#rowid_to_column() %>%
spread(id,levels) %>%
arrange(level1,level2) %>% View
group_by(level1) %>%
#rowid_to_column() %>%
spread(id,levels) %>%
group_by(test) %>%
COMB_DF %>%
mutate(id=c("level1","level2")) %>%
#rowid_to_column() %>%
spread(id,levels) %>%
group_by(level1) %>%
resultado=="*" ~ levels,
resultado=="ns" ~ paste(levels[resultado=="ns"],collapse = " & ")  )%>%
View
COMB_DF %>%
COMB_DF %>%
group_by(test) %>%
mutate(id=c("level1","level2")) %>%
#rowid_to_column() %>%
spread(id,levels) %>%
arrange(level1,level2) %>%
group_by(level1) %>%
dplyr::mutate(equacao=dplyr::case_when(
resultado=="*" ~ levels,
resultado=="ns" ~ paste(levels[resultado=="ns"],collapse = " & ")  ))%>% View
resultado=="*" ~ levels,
resultado=="ns" ~ paste(level1[resultado=="ns"], level2[resultado=="ns"],sep = " & ")  ))%>% View
#rowid_to_column() %>%
COMB_DF %>%
group_by(test) %>%
mutate(id=c("level1","level2")) %>%
#rowid_to_column() %>%
spread(id,levels) %>%
arrange(level1,level2) %>%
group_by(level1) %>%
dplyr::mutate(equacao=dplyr::case_when(
resultado=="*" ~ levels,
resultado=="ns" ~ paste(level1[resultado=="ns"], level2[resultado=="ns"],sep = " & ")  ))%>% View
COMB_DF %>%
group_by(test) %>%
mutate(id=c("level1","level2")) %>%
#rowid_to_column() %>%
spread(id,levels) %>%
arrange(level1,level2) %>%
group_by(level1) %>%
dplyr::mutate(equacao=dplyr::case_when(
resultado=="*" ~  paste(level1, level2,sep = " & ") ,
resultado=="ns" ~ paste(level1[resultado=="ns"], level2[resultado=="ns"],sep = " & ")  ))%>% View
COMB_DF %>%
group_by(test) %>%
mutate(id=c("level1","level2")) %>%
#rowid_to_column() %>%
spread(id,levels) %>%
arrange(level1,level2) %>%
group_by(level1)
resultado=="*" ~  paste(level1, level2,sep = " & ") ,
resultado=="ns" ~ paste(level1[1], paste0(level2[resultado=="ns"],collapse=" & "),sep = " & ")  ))%>% View
COMB_DF %>%
group_by(test) %>%
mutate(id=c("level1","level2")) %>%
#rowid_to_column() %>%
spread(id,levels) %>%
arrange(level1,level2) %>%
group_by(level1) %>%
dplyr::mutate(equacao=dplyr::case_when(
resultado=="*" ~  paste(level1, level2,sep = " & ") ,
resultado=="ns" ~ paste(level1[1], paste0(level2[resultado=="ns"],collapse=" & "),sep = " & ")  ))%>% View
resultado=="*" ~  paste(level1, level2,sep = " & ") ,
resultado=="ns" ~ paste(level1[1], paste0(level2[resultado=="ns"],collapse=" & "),sep = " & ")  ))%>%
dplyr::distinct() %>% View
COMB_DF %>%
group_by(test) %>%
mutate(id=c("level1","level2")) %>%
#rowid_to_column() %>%
spread(id,levels) %>%
arrange(level1,level2) %>%
group_by(level1) %>%
dplyr::mutate(equacao=dplyr::case_when(
resultado=="*" ~  paste(level1, level2,sep = " & ") ,
resultado=="ns" ~ paste(level1[1], paste0(level2[resultado=="ns"],collapse=" & "),sep = " & ")  ))%>%
dplyr::distinct() %>% View
resultado=="*" ~  paste(level1, level2,sep = " & ") ,
resultado=="ns" ~ paste(level1[1], paste0(level2[resultado=="ns"],collapse=" & "),sep = " & ")  ))%>%
dplyr::distinct(equacao) %>% View
COMB_DF %>%
group_by(test) %>%
mutate(id=c("level1","level2")) %>%
#rowid_to_column() %>%
spread(id,levels) %>%
arrange(level1,level2) %>%
group_by(level1) %>%
dplyr::mutate(equacao=dplyr::case_when(
resultado=="*" ~  paste(level1, level2,sep = " & ") ,
resultado=="ns" ~ paste(level1[1], paste0(level2[resultado=="ns"],collapse=" & "),sep = " & ")  ))%>%
dplyr::distinct(equacao) %>% View
resultado=="*" ~  paste(level1, level2,sep = " & ") ,
resultado=="ns" ~ paste(level1[1], paste0(level2[resultado=="ns"],collapse=" & "),sep = " & ")  ))%>%
dplyr::distinct(equacao,.keep_all=TRUE) %>% View
COMB_DF %>%
group_by(test) %>%
mutate(id=c("level1","level2")) %>%
#rowid_to_column() %>%
spread(id,levels) %>%
arrange(level1,level2) %>%
group_by(level1) %>%
dplyr::mutate(equacao=dplyr::case_when(
resultado=="*" ~  paste(level1, level2,sep = " & ") ,
resultado=="ns" ~ paste(level1[1], paste0(level2[resultado=="ns"],collapse=" & "),sep = " & ")  ))%>%
dplyr::distinct(equacao,.keep_all=TRUE) %>% View
COMB_DF %>%
group_by(test) %>%
mutate(id=c("level1","level2")) %>%
#rowid_to_column() %>%
spread(id,levels) %>%
arrange(level1,level2) %>%
group_by(level1) %>%
dplyr::mutate(equacao=dplyr::case_when(
resultado=="*" ~  paste(level1, level2,sep = " & ") ,
resultado=="ns" ~ paste(level1[1], paste0(level2[resultado=="ns"],collapse=" & "),sep = " & ")  ),
level1=forcats::as_factor(level1),
level2+forcats::as_factor(level2))%>%
dplyr::distinct(equacao,.keep_all=TRUE) %>% View
COMB_DF %>%
group_by(test) %>%
mutate(id=c("level1","level2")) %>%
#rowid_to_column() %>%
spread(id,levels) %>%
arrange(level1,level2) %>%
group_by(level1) %>%
dplyr::mutate(equacao=dplyr::case_when(
resultado=="*" ~  paste(level1, level2,sep = " & ") ,
resultado=="ns" ~ paste(level1[1], paste0(level2[resultado=="ns"],collapse=" & "),sep = " & ")  ),
level1=forcats::as_factor(level1),
level2+forcats::as_factor(level2))%>%
dplyr::distinct(equacao,.keep_all=TRUE) %>% View
resultado=="*" ~  paste(level1, level2,sep = " & ") ,
resultado=="ns" ~ paste(level1[1], paste0(level2[resultado=="ns"],collapse=" & "),sep = " & ")  ))%>%
dplyr::distinct(equacao,.keep_all=TRUE) %>%
dplyr::ungroup() %>%
dplyr::mutate(level1=forcats::as_factor(level1),
level2=forcats::as_factor(level2)) %>% View
COMB_DF %>%
group_by(test) %>%
mutate(id=c("level1","level2")) %>%
#rowid_to_column() %>%
spread(id,levels) %>%
arrange(level1,level2) %>%
group_by(level1) %>%
dplyr::mutate(equacao=dplyr::case_when(
resultado=="*" ~  paste(level1, level2,sep = " & ") ,
resultado=="ns" ~ paste(level1[1], paste0(level2[resultado=="ns"],collapse=" & "),sep = " & ")  ))%>%
dplyr::distinct(equacao,.keep_all=TRUE) %>%
dplyr::ungroup() %>%
dplyr::mutate(level1=forcats::as_factor(level1),
level2=forcats::as_factor(level2)) %>% View
COMB_DF_F <- COMB_DF %>%
group_by(test) %>%
mutate(id=c("level1","level2")) %>%
#rowid_to_column() %>%
spread(id,levels) %>%
arrange(level1,level2) %>%
group_by(level1) %>%
dplyr::mutate(equacao=dplyr::case_when(
resultado=="*" ~  paste(level1, level2,sep = " & ") ,
resultado=="ns" ~ paste(level1[1], paste0(level2[resultado=="ns"],collapse=" & "),sep = " & ")  ))%>%
dplyr::distinct(equacao,.keep_all=TRUE) %>%
dplyr::ungroup() %>%
dplyr::mutate(level1=NULL,level2=NULL,test=NULL) %>% View
COMB_DF
COMB_DF %>%
dplyr::group_by(test) %>%
dplyr::arrange(resultado) %>%
# manter resultados com ns
# manter apenas resultados com * que nao aparecem em ns, ou seja, apenas os * unicos
dplyr::filter(resultado=="ns" | (resultado=="*" & ! levels %in% levels[resultado=="ns"] )) %>%
dplyr::distinct(levels,.keep_all = TRUE)
COMB_DF %>%
dplyr::arrange(resultado) %>%
# manter resultados com ns
# manter apenas resultados com * que nao aparecem em ns, ou seja, apenas os * unicos
dplyr::filter(resultado=="ns" | (resultado=="*" & ! levels %in% levels[resultado=="ns"] )) %>%
dplyr::distinct(levels,.keep_all = TRUE)
resultado=="*" ~  paste(level1, level2,sep = " & ") ,
resultado=="ns" ~ paste(level1[1], paste0(level2[resultado=="ns"],collapse=" & "),sep = " & ")  ))%>%
dplyr::distinct(equacao,.keep_all=TRUE) %>%
dplyr::ungroup() %>%
tidyr::unite(levels,level1,level2) %>% View
COMB_DF_F <- COMB_DF %>%
group_by(test) %>%
mutate(id=c("level1","level2")) %>%
#rowid_to_column() %>%
spread(id,levels) %>%
arrange(level1,level2) %>%
group_by(level1) %>%
dplyr::mutate(equacao=dplyr::case_when(
resultado=="*" ~  paste(level1, level2,sep = " & ") ,
resultado=="ns" ~ paste(level1[1], paste0(level2[resultado=="ns"],collapse=" & "),sep = " & ")  ))%>%
dplyr::distinct(equacao,.keep_all=TRUE) %>%
dplyr::ungroup() %>%
tidyr::unite(levels,level1,level2) %>% View
COMB_DF_F <- COMB_DF %>%
group_by(test) %>%
mutate(id=c("level1","level2")) %>%
#rowid_to_column() %>%
spread(id,levels) %>%
arrange(level1,level2) %>%
group_by(level1) %>%
dplyr::mutate(equacao=dplyr::case_when(
resultado=="*" ~  paste(level1, level2,sep = " & ") ,
resultado=="ns" ~ paste(level1[1], paste0(level2[resultado=="ns"],collapse=" & "),sep = " & ")  ))%>%
dplyr::distinct(equacao,.keep_all=TRUE) %>%
dplyr::ungroup() %>%
tidyr::unite(levels,level1,level2)
COMB_DF_F
# Converter levels para fator, para ficar compativel com
# a coluna que ele sera comparado no left_join
COMB_DF <- COMB_DF  %>%
dplyr::mutate(levels=forcats::as_factor(levels))
COMB_DF
# Renomear levels para o nome utilizado no DF
names(COMB_DF)[names(COMB_DF)=="levels"] <- factor
COMB_DF
# Converter levels para fator, para ficar compativel com
# a coluna que ele sera comparado no left_join
COMB_DF <- COMB_DF  %>%
dplyr::mutate(levels=forcats::as_factor(levels))
COMB_DF <- as.data.frame(ALL_COMB)
names(COMB_DF) <- paste("test",1:length(COMB_DF),sep="_")
COMB_DF <- suppressWarnings(COMB_DF %>% tidyr::gather(test,levels))
# Converter levels para fator, para ficar compativel com
# a coluna que ele sera comparado no left_join
COMB_DF <- COMB_DF  %>%
dplyr::mutate(levels=forcats::as_factor(levels))
COMB_DF
# Salvar o vetor com os resultados do teste no dataframe
COMB_DF$resultado <- as.vector(do.call(rbind,lista_results))
names(COMB_DF)[names(COMB_DF)=="levels"]
factor
# Renomear levels para o nome utilizado no DF
names(COMB_DF)[names(COMB_DF)=="levels"] <- factor
COMB_DF
dplyr::left_join(DF, COMB_DF,by=factor)
COMB_DF_F
- COMB_DF %>%
group_by(test) %>%
mutate(id=c("level1","level2")) %>%
#rowid_to_column() %>%
spread(id,levels) %>%
arrange(level1,level2)
COMB_DF
COMB_DF %>%
group_by(test) %>%
mutate(id=c("level1","level2"))
COMB_DF %>%
group_by(test) %>%
mutate(id=c("level1","level2")) %>%
#rowid_to_column() %>%
spread(id,levels)
COMB_DF <- as.data.frame(ALL_COMB)
names(COMB_DF) <- paste("test",1:length(COMB_DF),sep="_")
COMB_DF <- suppressWarnings(COMB_DF %>% tidyr::gather(test,levels))
COMB_DF %>%
group_by(test) %>%
mutate(id=c("level1","level2")) %>%
#rowid_to_column() %>%
spread(id,levels) %>%
arrange(level1,level2)
# Salvar o vetor com os resultados do teste no dataframe
COMB_DF$resultado <- as.vector(do.call(rbind,lista_results))
COMB_DF %>%
group_by(test) %>%
mutate(id=c("level1","level2")) %>%
#rowid_to_column() %>%
spread(id,levels) %>%
arrange(level1,level2)
COMB_DF_F <- COMB_DF %>%
group_by(test) %>%
mutate(id=c("level1","level2")) %>%
#rowid_to_column() %>%
spread(id,levels) %>%
arrange(level1,level2) %>%
group_by(level1) %>%
dplyr::mutate(equacao=dplyr::case_when(
resultado=="*" ~  paste(level1, level2,sep = " & ") ,
resultado=="ns" ~ paste(level1[1], paste0(level2[resultado=="ns"],collapse=" & "),sep = " & ")  ))
View(COMB_DF_F)
ExpDes.pt::tukey
ExpDes.pt::fat2.dic
